- creazione di un componente padre che effettua una chiamata verso un service injettato (delegato alla chiamata per far tornare la lista dei film)
- solo il componente padre avrà le logiche, il figlio delegato solo alla vista, più banale possibile. è lui che intercetterà il click ma comunque lo invierà al padre

- componente figlio (esattamente uguale a quello di profile) che riceve in input la lista dei film e rappresenta la lista (avrà solo input per ricevere i film e output per mandare il click)

- dalla lista si avrà i click sugli elementi.
    - il click -> passerà il film al padre che provvederà a chiamare la rotta -> tramite una rotta dinamica /detail/:id
    - implementare lo slider --> abbiamo due icone, edit e delete --> passeranno al padre il film selezionato (console.log)

- componente del dettaglio che recupera l'id dal parametro e chiama il service per ricavare il film dall'array
    - visualizza le info del film

- bonus: torna indietro dalla tab del dettaglio con la freccia sulla nav

- lista farla shared, fuori dal contesto della tab

- creare una form ed evento submit agganciato

- fai delete e aggiunta




-header come componente
-titolo passato come input dal padre nell'header

-crea list item condivisa FATTO FINALMENTE
creo componente condiviso e importo, faccio il mapping di tutte le funzioni, passo in input list e non più movies/celebrities

-id istanziato fuori FATTO (errore)
-interfaccia Movies con lettera maiuscola FATTO
-rendere privato ciò che è da rendere privato con l'underscore FATTO
-risolvi warning ionlabel
-cambiare l'any del result del getlistsubject nel movieservice (l'oggettone, oltre a movie/celebrity, ti ridà anche la paginazione. quindi va messa quella nell'interface. vedi con un console.log cosa ti restituisce e falla di seguito)

-VEDERE CAST NEL DETTAGLIO DEL MOVIE COL CLICK CHE TI RIMANDA AL DETTAGLIO DELLA' CELEBRITA'
-per fare ciò crearsi una card comune come componente con id e name, simile alla lista
-routerlink all'interno dell'html, scatenando  la rotta dal'html
https://angular.io/api/router/RouterLink
la difficoltà sta nel fatto che c'è chi andrà su movie e chi su celebrity

PER ESERCIZIO: 2 tab 2 services 2 entità